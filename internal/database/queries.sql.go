// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const countAdminAssociation = `-- name: CountAdminAssociation :one
SELECT count(*)
FROM admins_association 
WHERE client_id = $1 AND api_id = $2
`

type CountAdminAssociationParams struct {
	ClientID uuid.UUID
	ApiID    uuid.UUID
}

func (q *Queries) CountAdminAssociation(ctx context.Context, arg CountAdminAssociationParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAdminAssociation, arg.ClientID, arg.ApiID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRouteAssociation = `-- name: CountRouteAssociation :one
SELECT count(*)
FROM routes_association 
WHERE client_id = $1 AND route_id = $2
`

type CountRouteAssociationParams struct {
	ClientID uuid.UUID
	RouteID  uuid.UUID
}

func (q *Queries) CountRouteAssociation(ctx context.Context, arg CountRouteAssociationParams) (int64, error) {
	row := q.db.QueryRow(ctx, countRouteAssociation, arg.ClientID, arg.RouteID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getApiIdByUrl = `-- name: GetApiIdByUrl :one
SELECT id 
FROM apis 
WHERE url = $1
`

func (q *Queries) GetApiIdByUrl(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getApiIdByUrl, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getApiRouteIdByMethodAndPath = `-- name: GetApiRouteIdByMethodAndPath :one
SELECT id 
FROM routes 
WHERE api_id = $1 AND method = $2 AND path = $3
`

type GetApiRouteIdByMethodAndPathParams struct {
	ApiID  uuid.UUID
	Method string
	Path   string
}

func (q *Queries) GetApiRouteIdByMethodAndPath(ctx context.Context, arg GetApiRouteIdByMethodAndPathParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getApiRouteIdByMethodAndPath, arg.ApiID, arg.Method, arg.Path)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getApiRoutesByMethod = `-- name: GetApiRoutesByMethod :many
SELECT id, method, path, api_id 
FROM routes 
WHERE api_id = $1 AND method = $2
`

type GetApiRoutesByMethodParams struct {
	ApiID  uuid.UUID
	Method string
}

func (q *Queries) GetApiRoutesByMethod(ctx context.Context, arg GetApiRoutesByMethodParams) ([]Route, error) {
	rows, err := q.db.Query(ctx, getApiRoutesByMethod, arg.ApiID, arg.Method)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.ID,
			&i.Method,
			&i.Path,
			&i.ApiID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientIdByName = `-- name: GetClientIdByName :one
SELECT id
FROM clients 
WHERE name = $1
`

func (q *Queries) GetClientIdByName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getClientIdByName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
